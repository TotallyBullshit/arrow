% Generated by roxygen2 (4.0.0): do not edit by hand
\name{xAsClosure}
\alias{xAsClosure}
\title{xAsClosure}
\usage{
xAsClosure(fn)
}
\arguments{
\item{fn}{an arbitrary function. Either a primitive or
   non-primitive function to convert to a non-primitive function.}
}
\value{
A non-primitive closure.
}
\description{
Convert a primitive function to a closure.
}
\details{
\bold{xAsClosure} takes a primitive function and wraps it in a
   normal R function that passes its arguments to the underlying
   primitive function.

   The most commonly encountered R primitive functions are the arithmetic
   operators. \bold{xAsClosure} can convert these to normal functions.

   \code{xAsClosure('+')}

   \code{function (e1, e2) fn(e1, e2)}

   doc
}
\section{Corner Cases}{

   \code{xAsClosure} does not work for every primitive function
   (for example \bold{c( )}), so caution should be taken when
   using this function.
}
\examples{

# 1. The most likely use case; converting the
#    primitive operations to normal R functions.

plus <- xAsClosure('+')
plus(1, 2)

# 3

is.primitive(plus)

# FALSE

# 2. Arrow functions are usually fine with primitive functions.
#

x_(1:3) $ x_Scanl(plus, 0)

# list(0, 1, 3, 6)

x_(1:3) $ x_Scanl('+', 0)

# list(0, 1, 3, 6)
}
\seealso{
Other function_modifying_functions: \code{\link{\%and\%}},
  \code{\link{\%or\%}}, \code{\link{xLift}},
  \code{\link{xLift...}}; \code{\link{\%of\%}},
  \code{\link{\%then\%}}, \code{\link{xCompose}},
  \code{\link{xCompose...}}; \code{\link{xAsUnary}};
  \code{\link{xAsVariadic}}; \code{\link{xCapture}},
  \code{\link{xK}}; \code{\link{xDelay}};
  \code{\link{xJuxtapose}}, \code{\link{xJuxtapose...}};
  \code{\link{xNot}}; \code{\link{xPartial}},
  \code{\link{xPartial...}}; \code{\link{xThread}},
  \code{\link{xThread...}}; \code{\link{xVectorise}},
  \code{\link{xVectorize}}
}

